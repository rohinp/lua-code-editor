{"input":"Uses Lua's built-in print function to output 'Hello World!' to the console. This is a classic first program to verify Lua is working properly.","output":"print(\"Hello World!\")"}
{"input":"Declares a local variable 'name' with the value 'Alice' and prints it to the console. Demonstrates basic variable assignment and output in Lua.","output":"local name = \"Alice\"\nprint(name)"}
{"input":"Initializes 'sum' to zero, then uses a for loop to iterate from 1 to 5, adding each number to 'sum'. Finally prints the result, which illustrates a classic summation loop.","output":"local sum = 0\nfor i=1,5 do\n  sum = sum + i\nend\nprint(sum)"}
{"input":"Defines a function 'greet' that takes a parameter 'person' and prints a greeting. Then calls 'greet' with the argument 'Bob' to demonstrate function usage.","output":"function greet(person)\n  print(\"Hello, \" .. person)\nend\ngreet(\"Bob\")"}
{"input":"Implements a recursive factorial function. If 'n' is 0, returns 1; otherwise multiplies 'n' by the factorial of 'n-1.' Then prints factorial(5) = 120.","output":"function factorial(n)\n  if n == 0 then return 1 end\n  return n * factorial(n - 1)\nend\nprint(factorial(5))"}
{"input":"Shows how to create a numerically indexed table (array) in Lua and access an element. 'arr[2]' is 'banana' because Lua arrays are 1-indexed by default.","output":"local arr = {\"apple\", \"banana\", \"cherry\"}\nprint(arr[2])"}
{"input":"Uses a simple numeric for loop that runs from 1 to 3. Prints a message each iteration to track the loop index.","output":"for i = 1, 3 do\n  print(\"Loop #\" .. i)\nend"}
{"input":"Demonstrates a while loop. Continues printing 'Count: x' until 'i' exceeds 3, showing basic loop control.","output":"local i = 1\nwhile i <= 3 do\n  print(\"Count: \" .. i)\n  i = i + 1\nend"}
{"input":"Uses a table as a dictionary with string keys 'fruit' and 'vegetable.' Accesses a value by its key to print 'carrot.'","output":"local food = {fruit = \"apple\", vegetable = \"carrot\"}\nprint(food[\"vegetable\"])"}
{"input":"Displays a basic conditional structure. Checks if 'score' is at least 80, printing 'Excellent' if true, or 'Keep Trying' otherwise.","output":"local score = 78\nif score >= 80 then\n  print(\"Excellent\")\nelse\n  print(\"Keep Trying\")\nend"}
{"input":"Demonstrates the string library function 'string.len' to get the length of 'Hello Lua!.' Useful for measuring string sizes.","output":"local str = \"Hello Lua!\"\nprint(string.len(str))"}
{"input":"Shows how to swap two variables using multiple assignment. After swapping, 'x' becomes 20 and 'y' becomes 10.","output":"local x, y = 10, 20\nx, y = y, x\nprint(x, y)"}
{"input":"Defines a local function 'add' that returns the sum of two arguments. Prints the result of calling add(5, 7) which is 12.","output":"local function add(a, b)\n  return a + b\nend\nprint(add(5, 7))"}
{"input":"A function named 'double' multiplies its input by 2. Prints 20 when called with 10.","output":"function double(x)\n  return 2 * x\nend\nprint(double(10))"}
{"input":"Iterates over a list using 'ipairs,' which returns consecutive index-value pairs. Useful for sequences without gaps in indexing.","output":"local numbers = {1, 2, 3, 4}\nfor index, value in ipairs(numbers) do\n  print(index, value)\nend"}
{"input":"Uses 'pairs' to iterate over all key-value pairs in a table. Prints table fields 'name' and 'version' with their values.","output":"local t = {\n  name = \"Lua\",\n  version = \"5.x\"\n}\nfor k,v in pairs(t) do\n  print(k, v)\nend"}
{"input":"Extracts a substring from positions 2 to 5 in 'HelloLua,' resulting in 'ello.' Demonstrates the 'string.sub' function.","output":"local str = \"HelloLua\"\nprint(string.sub(str, 2, 5))"}
{"input":"Concatenates the elements of the table into a single string using ', ' as a separator. Outputs 'one, two, three.'","output":"local words = {\"one\", \"two\", \"three\"}\nprint(table.concat(words, \", \"))"}
{"input":"Compares two numbers 'a' and 'b' and returns the larger one. Prints 15 for the example given.","output":"local function maxOfTwo(a, b)\n  if a > b then return a else return b end\nend\nprint(maxOfTwo(15, 10))"}
{"input":"Accepts a list of 'names' and greets each one by prepending 'Hello, '. Demonstrates iterating via 'ipairs' on a table.","output":"local function greetList(names)\n  for _, name in ipairs(names) do\n    print(\"Hello, \" .. name)\n  end\nend\ngreetList({\"Mia\", \"Ada\", \"Eve\"})"}
{"input":"Uses a 'repeat...until' loop that executes its block at least once and continues until 'count' exceeds 3.","output":"local count = 1\nrepeat\n  print(\"Repeat \", count)\n  count = count + 1\nuntil count > 3"}
{"input":"Extracts words from a sentence using 'string.gmatch' with a pattern that captures alphanumeric segments and prints each word.","output":"local sentence = \"Lua is fun\"\nfor word in string.gmatch(sentence, \"(%w+)\") do\n  print(word)\nend"}
{"input":"Iterates through a numeric table, summing all values and returning the total. Prints 60 for the given array.","output":"function sumTable(tbl)\n  local total = 0\n  for _, v in ipairs(tbl) do\n    total = total + v\n  end\n  return total\nend\nprint(sumTable({10, 20, 30}))"}
{"input":"Performs a safe division. Returns an error message if 'b' is zero, otherwise returns the quotient. Demonstrates returning multiple values for error handling.","output":"function divider(a, b)\n  if b == 0 then\n    return nil, \"Cannot divide by zero\"\n  else\n    return a / b\n  end\nend\nlocal result, err = divider(10, 0)\nif err then print(err) else print(result) end"}
{"input":"Checks if 'num' is divisible by 2 using modulus. 'isEven(4)' is true, while 'isEven(7)' is false.","output":"local function isEven(num)\n  return num % 2 == 0\nend\nprint(isEven(4), isEven(7))"}
{"input":"Demonstrates the built-in 'table.sort' function, which sorts numeric arrays in ascending order. Prints the sorted array 1,2,3.","output":"local data = {3, 1, 2}\ntable.sort(data)\nfor _,v in ipairs(data) do\n  print(v)\nend"}
{"input":"Assigns a custom metatable that provides a default value when a key doesn't exist in 't.' Accessing 'someKey' prints 'Not found.'","output":"local meta = {}\nlocal t = setmetatable({}, meta)\nmeta.__index = function() return \"Not found\" end\nprint(t.someKey)"}
{"input":"Uses pattern matching to split the string by commas, printing 'a', 'b', 'c' on separate lines.","output":"local s = \"a,b,c\"\nfor token in string.gmatch(s, \"[^,]+\") do\n  print(token)\nend"}
{"input":"Conditional chain checks if 'i' is positive, negative, or zero. Illustrates if-elseif-else usage in Lua.","output":"local i = 10\nif i > 0 then\n  print(\"Positive\")\nelseif i < 0 then\n  print(\"Negative\")\nelse\n  print(\"Zero\")\nend"}
{"input":"Prints numbers from 'n' down to 1 in decreasing order. Once 'n' reaches 0, the while loop stops.","output":"function countdown(n)\n  while n > 0 do\n    print(n)\n    n = n - 1\n  end\nend\ncountdown(3)"}
{"input":"Creates a table with fields 'name', 'width', and 'height.' Then calculates a 'volume' field by multiplying width and height.","output":"local myTable = {\n  name = \"Box\",\n  width = 10,\n  height = 5\n}\nmyTable.volume = myTable.width * myTable.height\nprint(myTable.volume)"}
{"input":"Shows how to modify each element of a numeric list in place, multiplying each by 'factor.' Prints 6, 12, 18.","output":"function multiplyAll(tbl, factor)\n  for i=1,#tbl do\n    tbl[i] = tbl[i] * factor\n  end\nend\nlocal nums = {2,4,6}\nmultiplyAll(nums, 3)\nfor _,v in ipairs(nums) do\n  print(v)\nend"}
{"input":"Uses 'str:reverse()' from the Lua string library to reverse the characters in 'abc' into 'cba.'","output":"local function reverseString(str)\n  return str:reverse()\nend\nprint(reverseString(\"abc\"))"}
{"input":"Demonstrates variable shadowing in a nested scope. The inner block has its own 'x' variable that doesn't affect the outer 'x.'","output":"local function doSomething()\n  local x = \"Hello\"\n  do\n    local x = \"Inside\"\n    print(x)\n  end\n  print(x)\nend\ndoSomething()"}
{"input":"Accepts a variable number of arguments using '...', aggregates them into a table, and calculates their sum. Prints 10 for the example input.","output":"function sumVariadic(...)\n  local args = {...}\n  local total = 0\n  for _,val in ipairs(args) do\n    total = total + val\n  end\n  return total\nend\nprint(sumVariadic(1,2,3,4))"}
{"input":"Demonstrates a numeric for loop that starts at 1, increments by 2, and stops at 10. Prints odd numbers under or equal to 10.","output":"for i = 1, 10, 2 do\n  print(i)\nend"}
{"input":"Concatenates two strings using the '..' operator. Prints 'Hello Lua' as the combined result.","output":"function addStrings(a, b)\n  return a .. b\nend\nprint(addStrings(\"Hello \", \"Lua\"))"}
{"input":"Performs a basic arithmetic operation, incrementing 'x' by 3. Demonstrates reassignment to the same variable.","output":"local x = 5\nx = x + 3\nprint(x)"}
{"input":"Shows a two-dimensional table. Accesses item in the second sub-table, first index, printing 3.","output":"local nested = {\n  {1, 2},\n  {3, 4}\n}\nprint(nested[2][1])"}
{"input":"Populates a table with squares of 1 through 5, then prints the 5th element. Demonstrates building arrays dynamically.","output":"local t = {}\nfor i=1,5 do\n  t[i] = i * i\nend\nprint(t[5])"}
{"input":"Illustrates boolean logic with Lua's 'not' operator. 'x' is true, 'y' becomes false.","output":"local x = true\nlocal y = not x\nprint(x, y)"}
{"input":"Converts 'Lua' to uppercase using the string method ':upper().' This is part of Lua's built-in string library.","output":"local text = \"Lua\"\nprint(text:upper())"}
{"input":"Shows that Lua tables can store varied data types in a single array. Prints the boolean value 'true' at index 3.","output":"local mixed = {\"hello\", 42, true}\nprint(mixed[3])"}
{"input":"If 'name' is nil, the expression 'name or \"Stranger\"' defaults it to 'Stranger.' This ensures a greeting is always printed.","output":"local function greetDefault(name)\n  name = name or \"Stranger\"\n  print(\"Hello, \" .. name)\nend\ngreetDefault()"}
{"input":"Sums numbers in the inclusive range from 'startVal' to 'endVal.' For 1 to 10, it returns 55.","output":"local function sumOfRange(startVal, endVal)\n  local total = 0\n  for i=startVal, endVal do\n    total = total + i\n  end\n  return total\nend\nprint(sumOfRange(1,10))"}
{"input":"Uses 'string.gsub' with a function to swap each letter's case. 'AbC' becomes 'aBc.'","output":"function toggleCase(str)\n  return (str:gsub(\"(%a)\", function(c)\n    if c:lower() == c then\n      return c:upper()\n    else\n      return c:lower()\n    end\n  end))\nend\nprint(toggleCase(\"AbC\"))"}
{"input":"Collects distinct characters from 'banana' into a table using a set-like approach, then prints them combined into a string.","output":"local function uniqueChars(str)\n  local seen = {}\n  for c in str:gmatch(\".\") do\n    seen[c] = true\n  end\n  local result = {}\n  for k,_ in pairs(seen) do\n    table.insert(result, k)\n  end\n  return table.concat(result)\nend\nprint(uniqueChars(\"banana\"))"}
{"input":"Nested table model acts like a struct or object. Here, the 'resolution' sub-table includes width and height fields.","output":"local config = {\n  title = \"Game\",\n  resolution = {width=800, height=600}\n}\nprint(config.resolution.width)"}
{"input":"Filters out only even numbers from a given table by checking if each entry is divisible by 2.","output":"local function filterEvens(t)\n  local result = {}\n  for _, val in ipairs(t) do\n    if val % 2 == 0 then\n      table.insert(result, val)\n    end\n  end\n  return result\nend\nlocal evens = filterEvens({1,2,3,4,5,6})\nfor _,v in ipairs(evens) do print(v) end"}
{"input":"Computes the 6th Fibonacci number using naive recursion. 'fib(6)' yields 8.","output":"local function fib(n)\n  if n < 2 then return n end\n  return fib(n-1) + fib(n-2)\nend\nprint(fib(6))"}
{"input":"Wraps a function 'f' in another function that prints messages before and after calling 'f.' Demonstrates higher-order functions in Lua.","output":"local function wrapper(f)\n  return function(...)\n    print(\"Calling function\")\n    local result = f(...)\n    print(\"Function called\")\n    return result\n  end\nend\n\nlocal function add(a,b)\n  return a + b\nend\n\nlocal wrappedAdd = wrapper(add)\nprint(wrappedAdd(2,3))"}
{"input":"Implements a tail-recursive version of factorial, passing an accumulator. Some Lua implementations can optimize tail recursion.","output":"local function tailFactorial(n, acc)\n  acc = acc or 1\n  if n == 0 then return acc end\n  return tailFactorial(n-1, n*acc)\nend\nprint(tailFactorial(5))"}
{"input":"Calculates base^exp recursively. Returns 1024 for 2^10.","output":"local function power(base, exp)\n  if exp == 0 then return 1 end\n  return base * power(base, exp-1)\nend\nprint(power(2, 10))"}
{"input":"Nested loops that sum (i + j) for i in [1..5] and j in [1..3]. Demonstrates basic double iteration and accumulation.","output":"local total = 0\nfor i=1,5 do\n  for j=1,3 do\n    total = total + (i + j)\n  end\nend\nprint(total)"}
{"input":"Computes the arithmetic mean of a numeric table. For {5,10,15}, the average is 10.","output":"local function average(tbl)\n  local total = 0\n  for _,v in ipairs(tbl) do\n    total = total + v\n  end\n  return total / #tbl\nend\nprint(average({5,10,15}))"}
{"input":"Checks if a string is identical to its reverse. 'racecar' is a palindrome, so it returns true.","output":"function isPalindrome(str)\n  return str == str:reverse()\nend\nprint(isPalindrome(\"racecar\"))"}
{"input":"Implements a simple version of bubble sort by repeatedly swapping adjacent elements that are out of order.","output":"local function bubbleSort(arr)\n  for i = 1, #arr do\n    for j = 1, (#arr - i) do\n      if arr[j] > arr[j+1] then\n        arr[j], arr[j+1] = arr[j+1], arr[j]\n      end\n    end\n  end\nend\nlocal vals = {3,1,4,1,5}\nbubbleSort(vals)\nfor _,v in ipairs(vals) do print(v) end"}
{"input":"Iterates over lines in a multiline string using 'string.gmatch' until a newline. Demonstrates parsing multi-line text.","output":"local s = \"One line\nAnother line\nYet another line\"\nfor line in s:gmatch(\"(.-)\n\") do\n  print(line)\nend"}
{"input":"Makes a shallow copy of a table by iterating over 'pairs.' Changing 't2.a' won't affect 't1.a' in a shallow copy.","output":"local function tableCopy(orig)\n  local copy = {}\n  for k,v in pairs(orig) do\n    copy[k] = v\n  end\n  return copy\nend\nlocal t1 = {a=1, b=2}\nlocal t2 = tableCopy(t1)\nt2.a = 9\nprint(t1.a, t2.a)"}
{"input":"Applies a given function 'fn' to each element of 'tbl,' storing results in a new table. Mimics a 'map' operation common in functional programming.","output":"local function map(tbl, fn)\n  local result = {}\n  for i, v in ipairs(tbl) do\n    result[i] = fn(v)\n  end\n  return result\nend\nlocal squares = map({1,2,3}, function(x) return x*x end)\nfor _,val in ipairs(squares) do print(val) end"}
{"input":"Demonstrates a 'reduce' or 'fold' function that accumulates elements of a table by applying a function repeatedly. Summation is an example usage.","output":"local function reduce(tbl, fn, init)\n  local acc = init\n  for _,v in ipairs(tbl) do\n    acc = fn(acc, v)\n  end\n  return acc\nend\nlocal sum = reduce({1,2,3}, function(a,b) return a+b end, 0)\nprint(sum)"}
{"input":"Partially applies the first argument 'a' to 'fn,' returning a new function that awaits the second argument. Prints 10 with multiplyBy2(5).","output":"local function partial(fn, a)\n  return function(b)\n    return fn(a, b)\n  end\nend\n\nlocal function multiply(x, y)\n  return x*y\nend\n\nlocal multiplyBy2 = partial(multiply, 2)\nprint(multiplyBy2(5))"}
{"input":"Defines a simple coroutine that prints 'co i' three times and yields in each iteration. Then resumes it in a while loop until it's finished.","output":"local co = coroutine.create(function()\n  for i=1,3 do\n    print(\"co\", i)\n    coroutine.yield()\n  end\nend)\n\nwhile coroutine.status(co) ~= \"dead\" do\n  coroutine.resume(co)\nend"}
{"input":"A higher-order function returning a closure to divide any input by 'n.' 'half' divides input by 2, printing 10 for 20.","output":"local function dividerGenerator(n)\n  return function(x)\n    return x / n\n  end\nend\nlocal half = dividerGenerator(2)\nprint(half(20))"}
{"input":"Defines a '__call' metamethod on 't,' letting the table behave like a function. Calling 't(5)' prints 'Called table with: 5.'","output":"local t = {}\nsetmetatable(t, {\n  __call = function(tbl, x)\n    print(\"Called table with:\", x)\n  end\n})\nt(5)"}
{"input":"Creates a basic Lua module storing 'value' and a function 'add' to modify it. This can be required by other scripts for shared functionality.","output":"local M = {}\nM.value = 10\nfunction M.add(n)\n  M.value = M.value + n\nend\nreturn M"}
{"input":"Shows how to store computed results in 'cache' so subsequent calls with the same argument won't re-run the function. Great for optimization.","output":"function memoize(f)\n  local cache = {}\n  return function(x)\n    if cache[x] == nil then\n      cache[x] = f(x)\n    end\n    return cache[x]\n  end\nend\nlocal slowSquare = function(x) return x*x end\nlocal fastSquare = memoize(slowSquare)\nprint(fastSquare(10))"}
{"input":"Demonstrates simple object-oriented programming in Lua using metatables. 'instance' is created with 'Class:new' and calls 'greet.'","output":"local Class = {}\nClass.__index = Class\nfunction Class:new(name)\n  local obj = setmetatable({}, self)\n  obj.name = name\n  return obj\nend\nfunction Class:greet()\n  print(\"Hello, \" .. self.name)\nend\nlocal instance = Class:new(\"Lua\")\ninstance:greet()"}
{"input":"Extracts each digit from a numeric value and adds it to 'total' by repeatedly taking 'n % 10' and then dividing 'n' by 10.","output":"local function sumDigits(n)\n  local total = 0\n  while n > 0 do\n    total = total + (n % 10)\n    n = math.floor(n / 10)\n  end\n  return total\nend\nprint(sumDigits(1234))"}
{"input":"Recursively visits nested tables, collecting non-table elements into a single-level array. Example prints '1,2,3,4,5.'","output":"function flatten(t)\n  local result = {}\n  local function traverse(subt)\n    for _,v in ipairs(subt) do\n      if type(v) == \"table\" then\n        traverse(v)\n      else\n        table.insert(result, v)\n      end\n    end\n  end\n  traverse(t)\n  return result\nend\nprint(table.concat(flatten({1,{2,3,{4}},5}), \",\"))"}
{"input":"Simulates a ternary operator by choosing between 'a' or 'b' based on 'cond.' Prints 'Yes' for this example.","output":"function ternary(cond, a, b)\n  if cond then return a else return b end\nend\nprint(ternary(5>3, \"Yes\", \"No\"))"}
{"input":"Picks a random index in 'tbl' using 'math.random(#tbl).' Seeds the generator with the current time for varied results.","output":"function randomElement(tbl)\n  math.randomseed(os.time())\n  local idx = math.random(#tbl)\n  return tbl[idx]\nend\nprint(randomElement({\"apple\",\"orange\",\"pear\"}))"}
{"input":"Implements the selection sort algorithm, continuously searching for the minimum element in the unsorted portion and swapping it to the front.","output":"local function selectionSort(arr)\n  for i=1, #arr do\n    local minIndex = i\n    for j=i+1, #arr do\n      if arr[j] < arr[minIndex] then\n        minIndex = j\n      end\n    end\n    arr[i], arr[minIndex] = arr[minIndex], arr[i]\n  end\nend\nlocal data = {64,25,12,22,11}\nselectionSort(data)\nfor _,v in ipairs(data) do print(v) end"}
{"input":"Tallies the frequency of each character in 'hello,' returning a table with character counts. Then prints each character and its total.","output":"function countChars(str)\n  local counts = {}\n  for c in str:gmatch(\".\") do\n    counts[c] = (counts[c] or 0) + 1\n  end\n  return counts\nend\nlocal result = countChars(\"hello\")\nfor k,v in pairs(result) do\n  print(k, v)\nend"}
{"input":"Shows operator overloading with metatables. Defines the addition of two vector-like tables, returning a new table with combined 'x' and 'y' values.","output":"local meta = {\n  __add = function(a, b)\n    return {x = a.x + b.x, y = a.y + b.y}\n  end\n}\nlocal v1 = setmetatable({x=1, y=2}, meta)\nlocal v2 = {x=3, y=4}\nlocal v3 = v1 + v2\nprint(v3.x, v3.y)"}
{"input":"Creates a 'deep copy' of a table, duplicating nested tables and metatables. Demonstrates how changes to 'b' won't affect 'a.'","output":"function deepCopy(orig)\n  local orig_type = type(orig)\n  local copy\n  if orig_type == 'table' then\n    copy = {}\n    for orig_key, orig_value in next, orig, nil do\n      copy[deepCopy(orig_key)] = deepCopy(orig_value)\n    end\n    setmetatable(copy, deepCopy(getmetatable(orig)))\n  else\n    copy = orig\n  end\n  return copy\nend\n\nlocal a = {x = {1,2}, y=10}\nlocal b = deepCopy(a)\nb.x[1] = 9\nprint(a.x[1], b.x[1])"}
{"input":"Implements a basic quicksort. Removes the first element as pivot, partitions the rest into less/greater arrays, recursively sorts them, and recombines.","output":"function quickSort(array)\n  if #array < 2 then return array end\n  local pivot = table.remove(array, 1)\n  local less, greater = {}, {}\n  for _, value in ipairs(array) do\n    if value <= pivot then\n      table.insert(less, value)\n    else\n      table.insert(greater, value)\n    end\n  end\n  local sortedLess = quickSort(less)\n  local sortedGreater = quickSort(greater)\n  table.insert(sortedLess, 1, pivot)\n  for _,v in ipairs(sortedGreater) do\n    table.insert(sortedLess, v)\n  end\n  return sortedLess\nend\nlocal arr = {10,7,8,9,1,5}\nlocal sorted = quickSort(arr)\nfor _,v in ipairs(sorted) do print(v) end"}
{"input":"An iterative approach to Fibonacci that repeatedly updates 'a' and 'b.' 'fibonacciIter(6)' returns the 6th term, which is 8.","output":"local function fibonacciIter(n)\n  local a, b = 0, 1\n  for i=1, n do\n    a, b = b, a + b\n  end\n  return a\nend\nprint(fibonacciIter(6))"}
{"input":"A closure preserving a private 'count' variable across multiple calls. Prints 1, 2, and 3 sequentially.","output":"local function counter()\n  local count = 0\n  return function()\n    count = count + 1\n    return count\n  end\nend\n\nlocal c1 = counter()\nprint(c1(), c1(), c1())"}
{"input":"Stores functions in a 'tasks' list. 'add' registers a new task, 'run' executes them in sequence, showcasing closures for scheduling.","output":"local function scheduler()\n  local tasks = {}\n  return {\n    add = function(t) table.insert(tasks,t) end,\n    run = function()\n      for _,task in ipairs(tasks) do task() end\n    end\n  }\nend\n\nlocal sched = scheduler()\nsched.add(function() print(\"Task 1\") end)\nsched.add(function() print(\"Task 2\") end)\nsched.run()"}
{"input":"Scans the string for patterns like 'key=value' using 'string.gmatch' and saves them into a table. Prints recognized key-value pairs.","output":"function parseKV(str)\n  local tbl = {}\n  for key, val in str:gmatch(\"(%w+)=(%w+)\") do\n    tbl[key] = val\n  end\n  return tbl\nend\nlocal result = parseKV(\"name=Lua version=5.x\")\nfor k,v in pairs(result) do\n  print(k, v)\nend"}
{"input":"Forces 'x' to stay within the inclusive range [minVal, maxVal]. If 'x' is 15, it gets limited to 10.","output":"local function clamp(x, minVal, maxVal)\n  if x < minVal then return minVal\n  elseif x > maxVal then return maxVal\n  else return x\n  end\nend\nprint(clamp(15, 0, 10))"}
{"input":"Attempts to open a file with 'io.open,' reads all content if successful, then closes the file. Handles the case where the file can't be opened.","output":"local function readFile(path)\n  local file = io.open(path, \"r\")\n  if not file then return nil, \"Cannot open file\" end\n  local content = file:read(\"*all\")\n  file:close()\n  return content\nend\nlocal data, err = readFile(\"test.txt\")\nif data then print(data) else print(err) end"}
{"input":"Ensures a given function only executes once. Subsequent calls return the cached result. Prints 'Hello, Alice' on first call, nothing on second.","output":"function once(fn)\n  local done = false\n  local result\n  return function(...)\n    if not done then\n      result = fn(...)\n      done = true\n    end\n    return result\n  end\nend\nlocal function greet(name)\n  print(\"Hello, \"..name)\n  return \"Done\"\nend\nlocal greetOnce = once(greet)\nprint(greetOnce(\"Alice\"))\nprint(greetOnce(\"Bob\"))"}
{"input":"Creates a table of length 'n' with random floats from 0 to 1. Seeds with current time for unpredictable values each run.","output":"local function randomTable(n)\n  local t = {}\n  math.randomseed(os.time())\n  for i=1,n do\n    t[i] = math.random()\n  end\n  return t\nend\nlocal randVals = randomTable(3)\nfor _,v in ipairs(randVals) do print(v) end"}
{"input":"Transforms a two-argument function into nested single-argument functions. 'greet' is partially applied with 'Hello,' then invoked with 'World.'","output":"function curry(fn)\n  return function(a)\n    return function(b)\n      return fn(a,b)\n    end\n  end\nend\nlocal function concatStrings(a,b) return a..\" \"..b end\n\nlocal curriedConcat = curry(concatStrings)\nlocal greet = curriedConcat(\"Hello\")\nprint(greet(\"World\"))"}
{"input":"Uses 'string.match' to see if 'str' matches the given pattern. Returns true if it does, false if not.","output":"function matchCase(str, pattern)\n  return string.match(str, pattern) ~= nil\nend\nprint(matchCase(\"foo123\", \"foo%d+\"))"}
{"input":"Implements a circular buffer of fixed capacity 'size.' When pushing new items beyond capacity, it overwrites the oldest entries.","output":"function ringBuffer(size)\n  local buffer = {}\n  local index = 1\n  return {\n    push = function(_, val)\n      buffer[index] = val\n      index = (index % size) + 1\n    end,\n    get = function(_, i)\n      return buffer[i]\n    end\n  }\nend\n\nlocal rb = ringBuffer(3)\nrb.push(10)\nrb.push(20)\nrb.push(30)\nrb.push(40)\nprint(rb.get(1), rb.get(2), rb.get(3))"}
{"input":"Performs a binary search on a sorted array. Checks the middle element, adjusts the search range, and returns the index if found.","output":"local function binarySearch(arr, target)\n  local low, high = 1, #arr\n  while low <= high do\n    local mid = math.floor((low + high)/2)\n    if arr[mid] == target then\n      return mid\n    elseif arr[mid] < target then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return nil\nend\nprint(binarySearch({1,2,3,4,5,6}, 4))"}
{"input":"Checks whether 'tbl[key]' is nil. If it's not nil, the table has that key. Prints 'true, false' for 'alpha' and 'gamma.'","output":"function hasKey(tbl, key)\n  return tbl[key] ~= nil\nend\nlocal sample = {alpha=1, beta=2}\nprint(hasKey(sample, \"alpha\"), hasKey(sample, \"gamma\"))"}
{"input":"Copies every key-value pair from 't2' to 't1,' overwriting if keys overlap. After merging, 'tA' has fields 'a' and 'b'.","output":"function shallowMerge(t1, t2)\n  for k,v in pairs(t2) do\n    t1[k] = v\n  end\nend\nlocal tA = {a=1}\nlocal tB = {b=2}\nshallowMerge(tA, tB)\nprint(tA.a, tA.b)"}
{"input":"A simple rounding function that adds 0.5 and then floors the result, turning 3.7 into 4.","output":"function round(num)\n  return math.floor(num + 0.5)\nend\nprint(round(3.7))"}
{"input":"Captures initial arguments in 'args.' The returned function can be called with more numbers, summing both sets together.","output":"local function partialSum(...)\n  local args = {...}\n  return function(...)\n    local newArgs = {...}\n    local total = 0\n    for _,v in ipairs(args) do total = total + v end\n    for _,v in ipairs(newArgs) do total = total + v end\n    return total\n  end\nend\n\nlocal partialFn = partialSum(1,2)\nprint(partialFn(3,4))"}
{"input":"Checks if two floating-point numbers 'a' and 'b' are within a small tolerance, defaulting to 1e-6 if not specified.","output":"local function approxEquals(a, b, tolerance)\n  tolerance = tolerance or 1e-6\n  return math.abs(a - b) <= tolerance\nend\nprint(approxEquals(3.14159, 3.1416, 1e-5))"}
{"input":"Converts a total number of seconds (3661) to an H:M:S time format, resulting in '01:01:01.'","output":"function readableTime(seconds)\n  local hrs = math.floor(seconds / 3600)\n  local mins = math.floor((seconds % 3600) / 60)\n  local secs = seconds % 60\n  return string.format(\"%02d:%02d:%02d\", hrs, mins, secs)\nend\nprint(readableTime(3661))"}
{"input":"Changes snake_case to camelCase by removing underscores and capitalizing the subsequent letter. 'my_var_name' becomes 'myVarName.'","output":"function snakeToCamel(str)\n  local camel = str:gsub(\"_(%a)\", function(letter) return letter:upper() end)\n  return camel\nend\nprint(snakeToCamel(\"my_var_name\"))"}
{"input":"Scans through an array to find the smallest and largest values in a single pass, returning both.","output":"function findMinMax(arr)\n  local minVal, maxVal = arr[1], arr[1]\n  for i=2, #arr do\n    if arr[i] < minVal then minVal = arr[i] end\n    if arr[i] > maxVal then maxVal = arr[i] end\n  end\n  return minVal, maxVal\nend\nprint(findMinMax({3,1,4,2}))"}
{"input":"In a Neovim context, delays execution of 'fn' by 'delay' milliseconds. If called again before the delay passes, it resets the timer, preventing repeated activation.","output":"function debounce(fn, delay)\n  local timer = nil\n  return function(...)\n    if timer then timer:cancel() end\n    local args = {...}\n    timer = vim.defer_fn(function()\n      fn(unpack(args))\n    end, delay)\n  end\nend"}
{"input":"Takes multiple functions, storing them in a table. Returns a function that applies each stored function in sequence to 'param.' With inc->double, 5 becomes 12.","output":"function chainCalls(...)\n  local funcs = {...}\n  return function(param)\n    for _, f in ipairs(funcs) do\n      param = f(param)\n    end\n    return param\n  end\nend\nlocal function inc(n) return n+1 end\nlocal function double(n) return 2*n end\nlocal pipeline = chainCalls(inc, double)\nprint(pipeline(5))"}
{"input":"Simulates switch-like behavior by storing cases in a table. Looks up the function matching 'key' and calls it. If missing, returns an error.","output":"function dynamicSwitch(caseTable)\n  return function(key, ...)\n    local fn = caseTable[key]\n    if fn then\n      return fn(...)\n    else\n      return nil, \"No case defined\"\n    end\n  end\nend\n\nlocal cases = {\n  start = function() return \"Starting\" end,\n  stop = function() return \"Stopping\" end\n}\n\nlocal switchFn = dynamicSwitch(cases)\nprint(switchFn(\"start\"))\nprint(switchFn(\"unknown\"))"}
{"input":"Accepts a comparison function 'comp' and sorts a table of objects by customizable criteria, here sorting by 'age' ascending.","output":"function multiSort(tbl, comp)\n  table.sort(tbl, comp)\nend\n\nlocal data = {\n  {name=\"Alice\", age=30},\n  {name=\"Bob\", age=25},\n  {name=\"Carol\", age=28}\n}\n\nmultiSort(data, function(a,b) return a.age < b.age end)\nfor _,v in ipairs(data) do print(v.name, v.age) end"}
{"input":"Recursively traverses a table, increasing indentation for nested tables. Prints a more structured view of the data hierarchy.","output":"function prettyPrint(tbl, indent)\n  indent = indent or 0\n  for k,v in pairs(tbl) do\n    local spacing = string.rep(\" \", indent)\n    if type(v) == \"table\" then\n      print(spacing..k..\":\")\n      prettyPrint(v, indent+2)\n    else\n      print(spacing..k..\": \"..tostring(v))\n    end\n  end\nend\nprettyPrint({a=1, b={c=2, d=3}})"}
{"input":"Formats an integer as a hexadecimal string. 255 becomes '0xFF.' Simple demonstration of string formatting.","output":"function toHex(num)\n  return string.format(\"0x%X\", num)\nend\nprint(toHex(255))"}
{"input":"Implements a classic LIFO stack. 'push' places a value on top, 'pop' removes the top value, 'peek' views it, and 'size' returns the number of items.","output":"function stack()\n  local s = {}\n  return {\n    push = function(_, val)\n      table.insert(s, val)\n    end,\n    pop = function(_)\n      return table.remove(s)\n    end,\n    peek = function(_)\n      return s[#s]\n    end,\n    size = function(_)\n      return #s\n    end\n  }\nend\n\nlocal myStack = stack()\nmyStack:push(10)\nmyStack:push(20)\nprint(myStack:pop())\nprint(myStack:size())"}
{"input":"Displays a greeting to confirm that Lua is running successfully.","output":"print(\"Welcome to Lua!\")"}
{"input":"Assigns the value 10 to a local variable 'x' then prints it to console.","output":"local x = 10\nprint(x)"}
{"input":"Shows usage of the length operator '#' to print the string's character count.","output":"local str = \"Lua is cool\"\nprint(#str)"}
{"input":"Checks if 'n' is even or odd by using the modulus operator with 2.","output":"local n = 5\nif n % 2 == 0 then\n  print(\"Even\")\nelse\n  print(\"Odd\")\nend"}
{"input":"Illustrates a simple numeric for loop that iterates three times, appending the loop counter to the printed message.","output":"for i = 1, 3 do\n  print(\"Loop iteration \"..i)\nend"}
{"input":"Creates a basic array-like table of colors and prints the third entry, 'blue'.","output":"local t = {\"red\", \"green\", \"blue\"}\nprint(t[3])"}
{"input":"Defines a function to add one to any numeric input, then demonstrates by printing the result for 10.","output":"local function increment(value)\n  return value + 1\nend\nprint(increment(10))"}
{"input":"Splits a string by commas using 'string.gmatch' and prints each part on a separate line.","output":"local s = \"One,Two,Three\"\nfor token in string.gmatch(s, \"[^,]+\") do\n  print(token)\nend"}
{"input":"Shows the exponentiation operator '^' by squaring the input. Prints 9 for the input 3.","output":"local function power2(x)\n  return x^2\nend\nprint(power2(3))"}
{"input":"Demonstrates usage of the logical 'not' operator to trigger a condition when 'flag' is falsey.","output":"local flag = false\nif not flag then\n  print(\"Flag is false!\")\nend"}
{"input":"Counts backward from 5 to 1 in a reverse step for loop, printing each number.","output":"for i = 5, 1, -1 do\n  print(i)\nend"}
{"input":"Uses 'string.format' to print the approximate value of pi to two decimal places. Demonstrates basic number formatting.","output":"local pi = math.pi\nprint(string.format(\"%.2f\", pi))"}
{"input":"Uses varargs '...' to accept multiple names and greets each name in turn, iterating over the collected arguments.","output":"function greetEveryone(...)\n  for i, name in ipairs({...}) do\n    print(\"Hello, \"..name)\n  end\nend\ngreetEveryone(\"Anna\", \"Ben\", \"Charlie\")"}
{"input":"Sorts a table of numbers in ascending order using 'table.sort' then prints the sorted sequence.","output":"local nums = {8, 4, 6, 2}\ntable.sort(nums)\nfor _, n in ipairs(nums) do\n  print(n)\nend"}
{"input":"Extracts the substring starting at position 6 through the end; 'HelloWorld' becomes 'World'.","output":"local s = \"HelloWorld\"\nprint(s:sub(6))"}
{"input":"Computes the area of a circle using radius 'r' and pi from the 'math' library. Prints the area for a radius of 5.","output":"local function circleArea(r)\n  return math.pi * r^2\nend\nprint(circleArea(5))"}
{"input":"Defines a simple function that takes two numbers 'a' and 'b' and multiplies them.","output":"function multiply(a, b)\n  return a * b\nend\nprint(multiply(3, 4))"}
{"input":"Uses 'table.concat' to merge the string elements of 'fruit' into a single string, joined by semicolons.","output":"local fruit = {\"apple\", \"banana\", \"cherry\"}\nprint(table.concat(fruit, \"; \"))"}
{"input":"Checks if 'a' is greater than 5, then increases it by 2 if true. Demonstrates conditional numeric manipulation.","output":"local a = 7\nif a > 5 then\n  a = a + 2\nend\nprint(a)"}
{"input":"Compares three numbers and returns the largest by using simple tracking logic.","output":"function maxOfThree(x, y, z)\n  local m = x\n  if y > m then m = y end\n  if z > m then m = z end\n  return m\nend\nprint(maxOfThree(1, 5, 3))"}
{"input":"Executes the loop body at least once, printing 'Count:' each iteration until 'i' exceeds 3.","output":"local i = 1\nrepeat\n  print(\"Count: \"..i)\n  i = i + 1\nuntil i > 3"}
{"input":"Appends elements from tableTwo to tableOne using 'table.insert,' effectively concatenating them.","output":"local tableOne = {10,20}\nlocal tableTwo = {30,40}\nfor _,v in ipairs(tableTwo) do\n  table.insert(tableOne, v)\nend\nfor _,val in ipairs(tableOne) do\n  print(val)\nend"}
{"input":"Verifies if 'str' begins with 'prefix' by comparing the substring of matching length.","output":"function startsWith(str, prefix)\n  return str:sub(1, #prefix) == prefix\nend\nprint(startsWith(\"LuaLanguage\", \"Lua\"))"}
{"input":"Extracts alphabetic words from a phrase using the '%a+' pattern in 'string.gmatch.'","output":"local phrase = \"Make the most of it\"\nfor word in phrase:gmatch(\"%a+\") do\n  print(word)\nend"}
{"input":"Demonstrates adding all values in an array. For five ones, it returns 5.","output":"function sumArray(arr)\n  local total = 0\n  for _,v in ipairs(arr) do\n    total = total + v\n  end\n  return total\nend\nprint(sumArray({1,1,1,1,1}))"}
{"input":"Shows safe division with error handling. If 'y' is zero, returns an error message; otherwise returns the quotient.","output":"local function safeDivide(x, y)\n  if y == 0 then\n    return nil, \"Division by zero\"\n  end\n  return x/y\nend\nlocal result, err = safeDivide(9, 3)\nprint(result or err)"}
{"input":"Iterates over 'names' with 'ipairs,' printing both index (idx) and value (val).","output":"local names = {\"Tom\", \"Dick\", \"Harry\"}\nfor idx, val in ipairs(names) do\n  print(idx, val)\nend"}
{"input":"Uses a table to represent a 'person' with keys 'name' and 'age.' Accesses and prints these fields.","output":"local person = {name=\"Jane\", age=25}\nprint(person.name, person.age)"}
{"input":"Returns the negative of a given number. If input is 10, output is -10.","output":"function negate(num)\n  return -num\nend\nprint(negate(10))"}
{"input":"Prints numbers in descending order from 'n' down to 1. Demonstrates a simple decrementing while loop.","output":"function countDownFrom(n)\n  while n >= 1 do\n    print(n)\n    n = n - 1\n  end\nend\ncountDownFrom(3)"}
{"input":"Uses the 'and/or' idiom to compare two values, returning the smaller one.","output":"local function minOfTwo(a, b)\n  return (a < b) and a or b\nend\nprint(minOfTwo(2, 10))"}
{"input":"Increments 'i' by 2 each time, printing even numbers until 'i' exceeds 8. Example of a repeat-until loop.","output":"local i = 2\nrepeat\n  print(\"Value: \"..i)\n  i = i + 2\nuntil i > 8"}
{"input":"Reverses and prints a string character-by-character by iterating backwards. Ends with a newline.","output":"local phrase = \"Hello\"\nfor i=#phrase,1,-1 do\n  io.write(phrase:sub(i,i))\nend\nio.write(\"\n\")"}
{"input":"Populates a table with cubes of numbers 1 through 5, then prints the cube of 3 which is 27.","output":"local t = {}\nfor i=1,5 do\n  t[i] = i*i*i\nend\nprint(t[3])"}
{"input":"Converts a string to lowercase using 'string.lower.' Prints 'test' for 'TEST.'","output":"local s = \"TEST\"\nprint(string.lower(s))"}
{"input":"Illustrates a function that chooses to print either a greeting or a warning based on a boolean 'condition.'","output":"function greetOrWarn(name, condition)\n  if condition then\n    print(\"Welcome, \"..name)\n  else\n    print(\"Access Denied\")\n  end\nend\ngreetOrWarn(\"Karl\", true)"}
{"input":"Prints each value in 'data' by using 'pairs,' though 'ipairs' is typically more common for indexed arrays.","output":"local data = {\"a\",\"b\",\"c\"}\nfor _,val in pairs(data) do\n  print(val)\nend"}
{"input":"Extracts key-value pairs from a string by matching letters followed by digits, separated by semicolons.","output":"local line = \"A=1;B=2;C=3\"\nfor k,v in string.gmatch(line, \"(%a)=(%d+)\") do\n  print(k, v)\nend"}
{"input":"Demonstrates how to add a new element at index 3 and then concatenate the table contents into a single string.","output":"local letters = {\"X\", \"Y\"}\nletters[3] = \"Z\"\nprint(table.concat(letters, \", \"))"}
{"input":"Builds a string by repeating 'str' multiple times. For 'ha' repeated 3 times, returns 'hahaha.'","output":"local function replicate(str, times)\n  local result = {}\n  for i=1,times do\n    table.insert(result, str)\n  end\n  return table.concat(result)\nend\nprint(replicate(\"ha\", 3))"}
{"input":"Uses Lua's logical operators to return 'Pass' if 'score' is at least 50, otherwise 'Fail.'","output":"function passFail(score)\n  return (score >= 50) and \"Pass\" or \"Fail\"\nend\nprint(passFail(75))"}
{"input":"Displays a descending series from 'n' to 1 using a numeric for loop with a negative step.","output":"local function countdownPrint(n)\n  for i = n, 1, -1 do\n    print(i)\n  end\nend\ncountdownPrint(5)"}
{"input":"Executes a print statement only if 'condition' is true, otherwise prints 'Skipped.' A basic demonstration of branching.","output":"local function doTask(condition)\n  if condition then\n    print(\"Task done.\")\n  else\n    print(\"Skipped.\")\n  end\nend\ndoTask(false)"}
{"input":"Returns two values in reversed order, effectively swapping them. y becomes 1, x becomes 2.","output":"local function swapValues(a, b)\n  return b, a\nend\nlocal x, y = swapValues(1, 2)\nprint(x, y)"}
{"input":"Finds and prints the first sequence of digits in a string using a pattern match.","output":"local str = \"numbers: 123\"\nprint(str:match(\"%d+\"))"}
{"input":"Returns two values from a single function: the sum and the product of 'a' and 'b.' Demonstrates multiple return values.","output":"function sumAndProduct(a, b)\n  return a+b, a*b\nend\nlocal s, p = sumAndProduct(3,4)\nprint(s, p)"}
{"input":"Computes the area of a triangle by multiplying base and height, then halving the result.","output":"local function triArea(base, height)\n  return 0.5 * base * height\nend\nprint(triArea(10,5))"}
{"input":"Reads each line from a given file path into a table and returns it, handling the case if the file can't be opened.","output":"function readLines(filePath)\n  local file = io.open(filePath, \"r\")\n  if not file then return nil end\n  local lines = {}\n  for line in file:lines() do\n    table.insert(lines, line)\n  end\n  file:close()\n  return lines\nend"}
{"input":"Uses a concise function definition that immediately returns a string. Composes a greeting using concatenation.","output":"function greetShort(name) return \"Hi, \"..name end\nprint(greetShort(\"Rose\"))"}
{"input":"Generates a random integer in the inclusive range [min, max]. Seeds with 'os.time()' to vary the result between runs.","output":"local function randomRange(min, max)\n  math.randomseed(os.time())\n  return math.random(min, max)\nend\nprint(randomRange(1, 100))"}
{"input":"Splits a string by whitespace using '%S+', collecting each non-space sequence into a table. Demonstrates iterating the result.","output":"function parseWords(s)\n  local res = {}\n  for w in s:gmatch(\"%S+\") do\n    table.insert(res, w)\n  end\n  return res\nend\nlocal words = parseWords(\"Lua code more fun\")\nfor _,w in ipairs(words) do\n  print(w)\nend"}
{"input":"Finds and prints the maximum value in a simple numeric table. Starts tracking from the first element.","output":"local tbl = {5,3,7}\nlocal maxVal = tbl[1]\nfor i=2,#tbl do\n  if tbl[i] > maxVal then\n    maxVal = tbl[i]\n  end\nend\nprint(maxVal)"}
{"input":"Converts angles from degrees to radians using 'math.rad' and prints the sine of each angle.","output":"local angles = {30, 45, 90}\nfor _,a in ipairs(angles) do\n  print(math.sin(math.rad(a)))\nend"}
{"input":"Simulates rolling 'numDice' six-sided dice, storing and then printing each roll.","output":"local function rollDice(numDice)\n  math.randomseed(os.time())\n  local results = {}\n  for i=1,numDice do\n    results[i] = math.random(1,6)\n  end\n  return results\nend\nlocal r = rollDice(3)\nfor _,val in ipairs(r) do print(val) end"}
{"input":"Builds a closure tracking a private 'count' variable. Each call increases 'count' by a specified step (default 1 if not provided).","output":"local function makeCounter()\n  local count = 0\n  return function(step)\n    count = count + (step or 1)\n    return count\n  end\nend\nlocal c = makeCounter()\nprint(c(), c(2), c())"}
{"input":"Repeats a string a specified number of times. 'string.rep(\"Lua\",3)' yields 'LuaLuaLua.'","output":"local message = \"Lua\"\nprint(string.rep(message, 3))"}
{"input":"An iterative approach to factorial calculation, multiplying each number from 1 up to n. Prints 120 for n=5.","output":"local function factorialIter(n)\n  local result = 1\n  for i=1,n do\n    result = result * i\n  end\n  return result\nend\nprint(factorialIter(5))"}
{"input":"Reverses a table in-place by swapping symmetric elements from both ends towards the center.","output":"function tableReverse(arr)\n  local left, right = 1, #arr\n  while left < right do\n    arr[left], arr[right] = arr[right], arr[left]\n    left = left + 1\n    right = right - 1\n  end\nend\nlocal sample = {1,2,3,4}\ntableReverse(sample)\nfor _,v in ipairs(sample) do print(v) end"}
{"input":"Converts a temperature in Celsius to Fahrenheit. If input is 0, returns 32.","output":"local function celsiusToF(c)\n  return (9/5)*c + 32\nend\nprint(celsiusToF(0))"}
{"input":"Merges an array of strings with a '-' separator. Results in 'micro-macro-mega.'","output":"local words = {\"micro\", \"macro\", \"mega\"}\nlocal joined = table.concat(words, \"-\")\nprint(joined)"}
{"input":"Checks if all elements of a numeric table exceed a provided 'limit.' Returns false if any element fails the condition.","output":"function allGreaterThan(tbl, limit)\n  for _,v in ipairs(tbl) do\n    if v <= limit then\n      return false\n    end\n  end\n  return true\nend\nprint(allGreaterThan({5,7,9}, 4))"}
{"input":"Adds three parameters and returns the total. For 1,2,3 it prints 6.","output":"local function tripleAdd(a, b, c)\n  return a + b + c\nend\nprint(tripleAdd(1,2,3))"}
{"input":"Demonstrates conditional checks on a table field 'mp' within a hypothetical stats object.","output":"local stats = {hp=100, mp=50}\nif stats.mp < 10 then\n  print(\"Low MP!\")\nelse\n  print(\"MP OK\")\nend"}
{"input":"Checks if 'search' substring is found in 'text' by using 'string.find,' returning a boolean result.","output":"function findString(text, search)\n  return string.find(text, search) ~= nil\nend\nprint(findString(\"hello world\", \"world\"))"}
{"input":"Removes and returns the last element of the table, then prints the resulting truncated table.","output":"local arr = {5,10,15}\nprint(table.remove(arr))\nfor _,v in ipairs(arr) do\n  print(v)\nend"}
{"input":"Uses '%l' pattern to check if 'ch' is a lowercase letter, returning true for 'a' but false for 'A.'","output":"function isLowerCase(ch)\n  return ch:match(\"%l\") ~= nil\nend\nprint(isLowerCase(\"a\"), isLowerCase(\"A\"))"}
{"input":"Demonstrates Lua's 'or' operator. If the first argument is falsy, it falls back to the second, returning 'default' here.","output":"local function orLogic(a, b)\n  return a or b\nend\nprint(orLogic(false, \"default\"))"}
{"input":"Returns the second argument if the first is truthy, otherwise returns the first. Prints 'OK false' with these inputs.","output":"local function andLogic(a, b)\n  return a and b\nend\nprint(andLogic(true, \"OK\"), andLogic(false, \"NO\"))"}
{"input":"Classic FizzBuzz problem. Prints 'Fizz' for multiples of 3, 'Buzz' for multiples of 5, 'FizzBuzz' for multiples of 15, else number itself.","output":"function fizzBuzz(n)\n  for i=1,n do\n    if i % 15 == 0 then\n      print(\"FizzBuzz\")\n    elseif i % 3 == 0 then\n      print(\"Fizz\")\n    elseif i % 5 == 0 then\n      print(\"Buzz\")\n    else\n      print(i)\n    end\n  end\nend\nfizzBuzz(15)"}
{"input":"Returns a table of derived user info, including the full name and initials.","output":"function userInfo(firstName, lastName)\n  return {\n    fullName = firstName..\" \"..lastName,\n    initials = firstName:sub(1,1)..lastName:sub(1,1)\n  }\nend\nlocal info = userInfo(\"John\", \"Doe\")\nprint(info.fullName, info.initials)"}
{"input":"Ensures a function only runs once by checking an 'executed' flag. The second call does nothing.","output":"local function doOnce(fn)\n  local executed = false\n  return function(...)\n    if not executed then\n      executed = true\n      return fn(...)\n    end\n  end\nend\n\nlocal function show() print(\"Running\") end\nlocal f = doOnce(show)\nf()\nf()"}
{"input":"Uses an upvalue 'casualties' to track accumulative damage. Demonstrates how global or higher-scope variables can be modified within a local function.","output":"local casualties = 0\nlocal function takeDamage(amt)\n  casualties = casualties + amt\nend\ntakeDamage(5)\nprint(casualties)"}
{"input":"Randomly selects a single uppercase letter from the English alphabet by indexing into a string of letters.","output":"function randomLetter()\n  math.randomseed(os.time())\n  local letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n  local idx = math.random(#letters)\n  return letters:sub(idx,idx)\nend\nprint(randomLetter())"}
{"input":"Checks whether two tables have the same keys and values, ignoring nested structure differences. Returns true for identical key-value pairs.","output":"function shallowEqual(t1, t2)\n  for k,v in pairs(t1) do\n    if t2[k] ~= v then\n      return false\n    end\n  end\n  for k,v in pairs(t2) do\n    if t1[k] ~= v then\n      return false\n    end\n  end\n  return true\nend\nprint(shallowEqual({a=1},{a=1}))"}
{"input":"Uses 'math.max' and 'math.min' to restrict a value within bounds [low, high]. If 'x' is out of range, it's constrained to a boundary.","output":"function clampValue(x, low, high)\n  return math.max(low, math.min(x, high))\nend\nprint(clampValue(15, 0, 10))"}
{"input":"Converts a hexadecimal string to a decimal number using 'tonumber' with base 16, returning 255 for 'FF.'","output":"local function hexToDecimal(h)\n  return tonumber(h, 16)\nend\nprint(hexToDecimal(\"FF\"))"}
{"input":"Returns true if 'a' is evenly divisible by 'b,' determined via the modulus operator.","output":"function isMultiple(a, b)\n  return a % b == 0\nend\nprint(isMultiple(10, 5))"}
{"input":"Tries to require a Lua module inside a protected call (pcall). If the module is missing or fails to load, prints an error.","output":"function loadModule(name)\n  local success, mod = pcall(require, name)\n  if success then\n    return mod\n  else\n    print(\"Module \"..name..\" not found.\")\n    return nil\n  end\nend"}
{"input":"Uses a 'do' block to define a local variable 'secret.' The nested function obtains 'secret' due to closure, though it's not accessible externally otherwise.","output":"do\n  local secret = \"This is hidden\"\n  function revealSecret()\n    return secret\n  end\nend\nprint(revealSecret())"}
{"input":"Demonstrates default parameter values by using Lua's short-circuit evaluation with 'or.' If not passed in, 'a' or 'b' defaults.","output":"function paramDefault(a, b)\n  a = a or 1\n  b = b or 2\n  return a + b\nend\nprint(paramDefault(), paramDefault(4))"}
{"input":"Parses a binary string by iterating each bit, shifting 'sum' left by multiplying by 2. '1010' in binary equals decimal 10.","output":"function binaryToDecimal(bin)\n  local sum = 0\n  for i=1,#bin do\n    sum = sum * 2 + (bin:sub(i,i) == \"1\" and 1 or 0)\n  end\n  return sum\nend\nprint(binaryToDecimal(\"1010\"))"}
{"input":"Removes the first element of 'tbl' and reinserts it at the end, effectively rotating items left by one position.","output":"function rotateLeft(tbl)\n  local first = table.remove(tbl,1)\n  table.insert(tbl, first)\nend\nlocal example = {\"A\",\"B\",\"C\"}\nrotateLeft(example)\nfor _,v in ipairs(example) do\n  print(v)\nend"}
{"input":"Checks if the string is exclusively alphanumeric by searching for any non-alphanumeric characters ('[^%w]'). Returns false if found.","output":"function isAlphaNum(str)\n  return not (string.find(str, \"[^%w]\") ~= nil)\nend\nprint(isAlphaNum(\"abc123\"), isAlphaNum(\"abc-123\"))"}
{"input":"Increments each element of an array by 'inc.' Demonstrates in-place modification of numeric table values.","output":"function incTableValues(arr, inc)\n  for i,v in ipairs(arr) do\n    arr[i] = v + inc\n  end\nend\nlocal a = {0,5,10}\nincTableValues(a, 2)\nfor _,val in ipairs(a) do\n  print(val)\nend"}
{"input":"Converts a number to string, iterates each character, converts it back to a number, and sums them up.","output":"local function sumDigitsString(n)\n  local digits = tostring(n)\n  local sum = 0\n  for i=1,#digits do\n    sum = sum + tonumber(digits:sub(i,i))\n  end\n  return sum\nend\nprint(sumDigitsString(304))"}
{"input":"Prints only odd numbers up to 'n' by skipping those divisible by 2. For 1 to 5, prints 1,3,5.","output":"function skipEvenPrint(n)\n  for i=1,n do\n    if i % 2 ~= 0 then\n      print(i)\n    end\n  end\nend\nskipEvenPrint(5)"}
{"input":"Creates a new table filled with integers from 1 to 'n' in ascending order. Prints its length for demonstration.","output":"local function generateTable(n)\n  local t = {}\n  for i=1,n do\n    t[i] = i\n  end\n  return t\nend\nprint(#generateTable(10))"}
{"input":"Splits a string by a specified delimiter by building a pattern dynamically, then returns a table of tokens.","output":"function strSplit(s, delim)\n  local parts = {}\n  for token in s:gmatch(\"([^\"..delim..\"]+)\") do\n    table.insert(parts, token)\n  end\n  return parts\nend\nlocal splitted = strSplit(\"red|green|blue\", \"|\")\nfor _,c in ipairs(splitted) do\n  print(c)\nend"}
{"input":"Checks if a given year is a leap year under the Gregorian rules: multiples of 400 are leap years, multiples of 100 are not, multiples of 4 generally are.","output":"local function isLeapYear(year)\n  if (year % 400 == 0) then return true\n  elseif (year % 100 == 0) then return false\n  elseif (year % 4 == 0) then return true\n  else return false\n  end\nend\nprint(isLeapYear(2000), isLeapYear(1900), isLeapYear(2020))"}
{"input":"Compares the guess to a target, returning feedback if it's too low, too high, or exactly correct.","output":"local function guessNumber(guess, target)\n  if guess < target then\n    return \"Too low\"\n  elseif guess > target then\n    return \"Too high\"\n  else\n    return \"Correct\"\n  end\nend\nprint(guessNumber(10, 7))"}
{"input":"Searches for 'value' in 'tbl' and returns the matching index if found, or nil if not found. Prints 2 in this example.","output":"function indexOf(tbl, value)\n  for i,v in ipairs(tbl) do\n    if v == value then\n      return i\n    end\n  end\n  return nil\nend\nprint(indexOf({\"cat\",\"dog\",\"mouse\"}, \"dog\"))"}
{"input":"Implements Shell sort, an in-place comparison sort that starts with a large gap and reduces the gap until a standard insertion sort is performed.","output":"function shellSort(arr)\n  local n = #arr\n  local gap = math.floor(n/2)\n  while gap > 0 do\n    for i=gap+1,n do\n      local temp = arr[i]\n      local j = i\n      while j > gap and arr[j-gap] > temp do\n        arr[j] = arr[j-gap]\n        j = j - gap\n      end\n      arr[j] = temp\n    end\n    gap = math.floor(gap/2)\n  end\nend\nlocal sample = {12,34,54,2,3}\nshellSort(sample)\nfor _,v in ipairs(sample) do\n  print(v)\nend"}
{"input":"Shows that functions can return multiple values simultaneously, destructuring them into separate variables.","output":"function multiReturn()\n  return \"first\", \"second\", \"third\"\nend\nlocal a,b,c = multiReturn()\nprint(a,b,c)"}
{"input":"Used 'string.match' to detect if 'str' contains 'Hello.' Prints true for 'Hello world' and false otherwise.","output":"local function partialMatch(str)\n  return string.match(str, \"Hello\") ~= nil\nend\nprint(partialMatch(\"Hello world\"), partialMatch(\"Bye world\"))"}
{"input":"Concatenates multiple string arguments with a space in between them. Useful for building a sentence from varargs.","output":"function multiConcat(...)\n  local out = {}\n  for i,v in ipairs({...}) do\n    table.insert(out, v)\n  end\n  return table.concat(out, \" \")\nend\nprint(multiConcat(\"One\",\"Two\",\"Three\"))"}
{"input":"Distinguishes if 'n' is positive, negative, or zero in a chain of if-elseif-else statements.","output":"local function testNum(n)\n  if n > 0 then\n    return \"positive\"\n  elseif n < 0 then\n    return \"negative\"\n  else\n    return \"zero\"\n  end\nend\nprint(testNum(0))"}
{"input":"Demonstrates how to dynamically add or change table entries by passing a reference to a function.","output":"function storeKeyVal(tableRef, k, v)\n  tableRef[k] = v\nend\nlocal t = {}\nstoreKeyVal(t, \"score\", 100)\nprint(t.score)"}
{"input":"Computes a Tribonacci-style function, where each term is the sum of the previous three terms. For n=4, prints 4.","output":"function triFib(n)\n  if n < 2 then return n end\n  if n == 2 then return 1 end\n  return triFib(n-1) + triFib(n-2) + triFib(n-3)\nend\nprint(triFib(4))"}
{"input":"Applies a provided function 'action' to each element of the table. In this case, 'print' is used to output each string.","output":"local function forEach(tbl, action)\n  for _,v in ipairs(tbl) do\n    action(v)\n  end\nend\nforEach({\"log\",\"me\"}, print)"}
{"input":"Checks if a number is prime by testing divisibility from 2 up to its square root. Returns true for 13.","output":"function isPrime(num)\n  if num < 2 then return false end\n  for i=2, math.floor(math.sqrt(num)) do\n    if num % i == 0 then return false end\n  end\n  return true\nend\nprint(isPrime(13))"}
{"input":"Writes 'text' to a file, overwriting its contents. Returns true if successful; false if the file could not be opened.","output":"function writeFile(path, text)\n  local file = io.open(path, \"w\")\n  if file then\n    file:write(text)\n    file:close()\n    return true\n  else\n    return false\n  end\nend"}
{"input":"Calls the given function 'fn' repeatedly 'times' times, passing the iteration index to it. Prints 1, 2, 3 in this example.","output":"local function repeatCall(fn, times)\n  for i=1,times do\n    fn(i)\n  end\nend\nrepeatCall(function(i) print(i) end, 3)"}
{"input":"Converts a number 'n' from base 10 to an arbitrary base 'b' (up to 16). 255 in base 16 is 'FF.'","output":"function toBase(n, b)\n  local digits = \"0123456789ABCDEF\"\n  local result = \"\"\n  repeat\n    local r = n % b\n    result = digits:sub(r+1, r+1) .. result\n    n = math.floor(n / b)\n  until n == 0\n  return result\nend\nprint(toBase(255, 16))"}
{"input":"Performs a one-level flattening of a table that might contain nested tables, but doesn't handle deeper recursion.","output":"local function flattenShallow(t)\n  local res = {}\n  for _,sub in ipairs(t) do\n    if type(sub) == \"table\" then\n      for _,val in ipairs(sub) do\n        table.insert(res, val)\n      end\n    else\n      table.insert(res, sub)\n    end\n  end\n  return res\nend\nlocal out = flattenShallow({1,{2,3},4})\nfor _,v in ipairs(out) do print(v) end"}
{"input":"Loops through varargs, printing both index and value. Demonstrates enumerating all arguments passed to a function.","output":"function parseArgs(...)\n  for i,v in ipairs({...}) do\n    print(i, v)\n  end\nend\nparseArgs(\"hello\", 123, true)"}
{"input":"Adds together only the numeric fields in a table, ignoring non-numeric values. Returns 15 (10 + 5).","output":"local function sumMixed(t)\n  local total = 0\n  for _,v in pairs(t) do\n    if type(v) == \"number\" then\n      total = total + v\n    end\n  end\n  return total\nend\nprint(sumMixed({a=10, b=\"non-number\", c=5}))"}
{"input":"Splits a table into sub-tables ('chunks') each having maximum length 'size.' Demonstrates grouping data.","output":"local function chunkedList(t, size)\n  local result = {}\n  for i=1,#t,size do\n    local chunk = {}\n    for j=i, math.min(i+size-1, #t) do\n      table.insert(chunk, t[j])\n    end\n    table.insert(result, chunk)\n  end\n  return result\nend\nlocal splitted = chunkedList({1,2,3,4,5}, 2)\nfor _,group in ipairs(splitted) do\n  print(table.concat(group, \",\"))\nend"}
{"input":"Filters out duplicate values by tracking which ones were seen, returning a new table containing only unique entries in original order.","output":"local function removeDuplicates(arr)\n  local seen = {}\n  local out = {}\n  for _,v in ipairs(arr) do\n    if not seen[v] then\n      seen[v] = true\n      table.insert(out, v)\n    end\n  end\n  return out\nend\nlocal unique = removeDuplicates({1,2,2,3,1,4})\nfor _,v in ipairs(unique) do print(v) end"}
{"input":"Defines a higher-order function 'apply' that calls a function 'f' on a value. Here it cubes 3, returning 27.","output":"function cube(x)\n  return x^3\nend\nlocal function apply(f, val)\n  return f(val)\nend\nprint(apply(cube, 3))"}
{"input":"Looks up a function by 'eventName' in a table and calls it if found, passing 'data.' If no matching function, prints a warning.","output":"function dispatchEvent(eventHandlers, eventName, data)\n  local handler = eventHandlers[eventName]\n  if handler then\n    handler(data)\n  else\n    print(\"No handler for event:\", eventName)\n  end\nend\nlocal handlers = {\n  onLogin = function(info) print(\"Logged in:\"..info.user) end\n}\ndispatchEvent(handlers, \"onLogin\", {user=\"Alice\"})"}
{"input":"Checks if a file is accessible for reading, returning true if it exists, or false otherwise. Closes the file if opened.","output":"local function fileExists(path)\n  local file = io.open(path, \"r\")\n  if file then\n    file:close()\n    return true\n  end\n  return false\nend\nprint(fileExists(\"somefile.txt\"))"}
{"input":"Multiplies every element in the array, returning the accumulated product. For 2,3,4, the result is 24.","output":"local function reduceProduct(tbl)\n  local product = 1\n  for _,v in ipairs(tbl) do\n    product = product * v\n  end\n  return product\nend\nprint(reduceProduct({2,3,4}))"}
{"input":"Creates a new function that applies 'f1' then 'f2' in sequence to input 'x.' Doubling 10 yields 20, then adding 5 results in 25.","output":"function chain(f1, f2)\n  return function(x)\n    return f2(f1(x))\n  end\nend\nlocal double = function(x) return x*2 end\nlocal addFive = function(x) return x+5 end\nlocal combo = chain(double, addFive)\nprint(combo(10))"}
{"input":"Implements an optimized bubble sort that stops early if no swaps occur, indicating the list is already sorted.","output":"local data = {4,1,3,2}\nfor i=1,#data do\n  local swapped = false\n  for j=1,#data-i do\n    if data[j] > data[j+1] then\n      data[j], data[j+1] = data[j+1], data[j]\n      swapped = true\n    end\n  end\n  if not swapped then break end\nend\nfor _,v in ipairs(data) do\n  print(v)\nend"}
{"input":"Iterates over a table's key-value pairs, doubling numeric values but leaving other types unchanged. Returns a new table.","output":"function doubleTbl(tbl)\n  local out = {}\n  for k,v in pairs(tbl) do\n    if type(v) == \"number\" then\n      out[k] = 2*v\n    else\n      out[k] = v\n    end\n  end\n  return out\nend\nlocal original = {a=5, b=\"apple\"}\nlocal d = doubleTbl(original)\nprint(d.a, d.b)"}
{"input":"Scans all values in a table (both array and dictionary style) to determine if 'val' is present. Returns true if found.","output":"function hasValue(tbl, val)\n  for _,v in pairs(tbl) do\n    if v == val then\n      return true\n    end\n  end\n  return false\nend\nprint(hasValue({x=1,y=2},2))"}
{"input":"Summation from 'a' to 'b' inclusive if 'a' is not greater than 'b.' If 'a' is 5 and 'b' is 8, the aggregate is 5+6+7+8=26.","output":"function sumRange(a, b)\n  if a > b then\n    return 0\n  end\n  local total = 0\n  for i=a,b do\n    total = total + i\n  end\n  return total\nend\nprint(sumRange(5,8))"}
{"input":"Computes the greatest common divisor using the Euclidean algorithm. For 56 and 14, result is 14.","output":"function gcd(a, b)\n  if b == 0 then return a end\n  return gcd(b, a % b)\nend\nprint(gcd(56, 14))"}
{"input":"Builds a binary representation of 'n' by repeatedly taking 'n % 2' from right to left. For decimal 10, outputs '1010.'","output":"local function decimalToBinary(n)\n  if n == 0 then return \"0\" end\n  local bin = \"\"\n  while n > 0 do\n    bin = (n % 2)..bin\n    n = math.floor(n/2)\n  end\n  return bin\nend\nprint(decimalToBinary(10))"}
{"input":"A left fold function applies 'fn' to an accumulator 'acc' and each element in order, here concatenating characters into a single string, producing 'Lua.'","output":"local function foldl(fn, acc, arr)\n  for _,v in ipairs(arr) do\n    acc = fn(acc, v)\n  end\n  return acc\nend\nlocal r = foldl(function(a,b) return a..b end, \"\", {\"L\",\"u\",\"a\"})\nprint(r)"}
{"input":"Converts an integer to its Roman numeral form by iterating through known symbols and subtracting values from 'num.' Prints MCMLXXXVII for 1987.","output":"function toRoman(num)\n  local romanNumerals = {\n    {1000, \"M\"},{900, \"CM\"},{500,\"D\"},{400,\"CD\"},\n    {100,\"C\"},{90,\"XC\"},{50,\"L\"},{40,\"XL\"},\n    {10,\"X\"},{9,\"IX\"},{5,\"V\"},{4,\"IV\"},\n    {1,\"I\"}\n  }\n  local result = \"\"\n  for _, pair in ipairs(romanNumerals) do\n    while num >= pair[1] do\n      result = result..pair[2]\n      num = num - pair[1]\n    end\n  end\n  return result\nend\nprint(toRoman(1987))"}
{"input":"Chooses a random element from 'picks' by generating a random index. Used for typical 'rock-paper-scissors' style randomization.","output":"function randomChoice(tbl)\n  math.randomseed(os.time())\n  return tbl[math.random(#tbl)]\nend\nlocal picks = {\"rock\",\"paper\",\"scissors\"}\nprint(randomChoice(picks))"}
{"input":"Reverses key-value mappings in 'tbl,' storing them in 'inv.' So 'a=1' becomes '1=a' in the new table.","output":"function invertTable(tbl)\n  local inv = {}\n  for k,v in pairs(tbl) do\n    inv[v] = k\n  end\n  return inv\nend\nlocal example = {a=1, b=2} \nlocal inverted = invertTable(example)\nprint(inverted[1], inverted[2])"}
{"input":"Uses the length operator on varargs table '{...}' to count how many arguments were received. Prints 4 here.","output":"function multipleArgs(...)\n  return #{...}\nend\nprint(multipleArgs(1,2,\"three\",{}))"}
{"input":"Example 'encode/decode' that just reverses the string as a placeholder. Demonstrates storing multiple related functions in a table.","output":"local crypt = {\n  encode = function(str) return string.reverse(str) end,\n  decode = function(str) return string.reverse(str) end\n}\nlocal secret = crypt.encode(\"mysecret\")\nprint(secret, crypt.decode(secret))"}
{"input":"Adds corresponding elements of two 2D tables (matrices) and returns a new matrix with summed values.","output":"function matrixAdd(m1, m2)\n  local result = {}\n  for i=1,#m1 do\n    result[i] = {}\n    for j=1,#m1[i] do\n      result[i][j] = m1[i][j] + m2[i][j]\n    end\n  end\n  return result\nend\nlocal A = {{1,2},{3,4}}\nlocal B = {{2,0},{1,3}}\nlocal C = matrixAdd(A,B)\nprint(C[1][1], C[1][2], C[2][1], C[2][2])"}
{"input":"Checks if any element in 'tbl' satisfies 'predicate.' Returns as soon as it finds a match, or false if none do.","output":"local function any(tbl, predicate)\n  for _,value in ipairs(tbl) do\n    if predicate(value) then\n      return true\n    end\n  end\n  return false\nend\nprint(any({1,3,5}, function(v) return v % 2 == 0 end))"}
{"input":"Chains an arbitrary number of functions into a pipeline. The result of each function is passed to the next in sequence. For input 5, yields 12 (6 then 12).","output":"function pipeline(...)\n  local funcs = {...}\n  return function(input)\n    for _,fn in ipairs(funcs) do\n      input = fn(input)\n    end\n    return input\n  end\nend\n\nlocal function plusOne(x) return x+1 end\nlocal function timesTwo(x) return x*2 end\nlocal pipe = pipeline(plusOne, timesTwo)\nprint(pipe(5))"}
{"input":"Randomly shuffles a table in-place using the Fisher-Yates algorithm, ensuring uniform distribution of permutations.","output":"local function fisherYatesShuffle(t)\n  math.randomseed(os.time())\n  for i = #t, 2, -1 do\n    local j = math.random(1, i)\n    t[i], t[j] = t[j], t[i]\n  end\nend\nlocal cards = {\"A\",\"K\",\"Q\",\"J\"}\nfisherYatesShuffle(cards)\nprint(table.concat(cards, \",\"))"}
{"input":"Scans through 'arr' from start to end, checking each element for equality with 'key.' Returns the element index if found, or nil otherwise.","output":"function linearSearch(arr, key)\n  for i,v in ipairs(arr) do\n    if v == key then\n      return i\n    end\n  end\n  return nil\nend\nprint(linearSearch({100,200,300}, 200))"}
{"input":"Opens a file and reads a fixed 'chunkSize' of bytes, returning them. Useful for partial or streaming reads of large files.","output":"local function readChunk(filePath, chunkSize)\n  local file = io.open(filePath, \"r\")\n  if not file then return nil end\n  local data = file:read(chunkSize)\n  file:close()\n  return data\nend"}
{"input":"Applies a function 'fn' to each value in a table, replacing them in place. For numeric fields, multiplies them by 10.","output":"function transform(tbl, fn)\n  for k,v in pairs(tbl) do\n    tbl[k] = fn(v)\n  end\nend\nlocal sample = {a=1, b=2}\ntransform(sample, function(x) return x*10 end)\nprint(sample.a, sample.b)"}
{"input":"Computes the Ackermann function, a classic example of a deeply recursive function that grows extremely fast as its parameters increase.","output":"function ackermann(m, n)\n  if m == 0 then return n+1\n  elseif n == 0 then return ackermann(m-1, 1)\n  else return ackermann(m-1, ackermann(m, n-1)) end\nend\nprint(ackermann(2, 2))"}
{"input":"Wraps a function call in 'pcall' to catch any errors. Prints 'Success:' if no error, or 'Error:' followed by the message otherwise.","output":"function safeCall(fn, ...)\n  local status, result = pcall(fn, ...)\n  if status then\n    print(\"Success:\", result)\n  else\n    print(\"Error:\", result)\n  end\nend\nsafeCall(function() return 2+2 end)\nsafeCall(function() error(\"Oops\") end)"}
{"input":"Calculates the number of trailing zeros in n! by summing integer divisions for 5, 25, 125, etc. 25! includes 6 trailing zeros.","output":"function trailingZerosFactorial(n)\n  -- Count how many times 5 divides n!\n  local count = 0\n  local divisor = 5\n  while divisor <= n do\n    count = count + math.floor(n / divisor)\n    divisor = divisor * 5\n  end\n  return count\nend\nprint(trailingZerosFactorial(25))"}
{"input":"A simple JSON parsing trick for small, trusted data by concatenating 'return ' and using Lua's built-in parser. Not robust for untrusted input.","output":"function readJSON(filePath)\n  local file = io.open(filePath, \"r\")\n  if not file then return nil end\n  local content = file:read(\"*all\")\n  file:close()\n  local ok, data = pcall(function() return assert(load(\"return \"..content))() end)\n  if ok then\n    return data\n  else\n    return nil\n  end\nend"}
{"input":"Recursively checks nested tables for a matching value. Returns true if found anywhere in the structure.","output":"function deepContains(tbl, val)\n  for _,v in pairs(tbl) do\n    if v == val then return true end\n    if type(v) == \"table\" and deepContains(v, val) then\n      return true\n    end\n  end\n  return false\nend\nprint(deepContains({1,{2,3},4},3))"}
{"input":"Creates a coroutine that increments a 'count' each time it's resumed, returning the updated value. Demonstrates generator-like behavior.","output":"function closableGenerator()\n  local count = 0\n  return coroutine.create(function()\n    while true do\n      count = count + 1\n      coroutine.yield(count)\n    end\n  end)\nend\n\nlocal c = closableGenerator()\nfor _=1,3 do\n  print(coroutine.resume(c))\nend"}
{"input":"Packs varargs into a table with the addition of 'n' to store the count. This is a more robust approach than {...} alone if nil values can appear.","output":"function pack(...)\n  return {n=select(\"#\", ...), ...}\nend\nlocal t = pack(\"alpha\", \"beta\")\nprint(t[1], t[2], t.n)"}
{"input":"Checks if there's at least one uppercase letter in the string by matching '%u.' Prints false, true for 'hello', 'Hello' respectively.","output":"function anyLetterUpper(str)\n  return str:match(\"%u\") ~= nil\nend\nprint(anyLetterUpper(\"hello\"), anyLetterUpper(\"Hello\"))"}
{"input":"Sums the squares of integers from 1 to n. For n=3, 1^2 + 2^2 + 3^2 = 14.","output":"local function sumSquaresUpTo(n)\n  local total = 0\n  for i=1,n do\n    total = total + (i*i)\n  end\n  return total\nend\nprint(sumSquaresUpTo(3))"}
{"input":"Memoized factorial function that caches previous computations in 'cache,' avoiding repeated calculations on the same input.","output":"function factorialMemo()\n  local cache = {}\n  local function f(n)\n    if n == 0 then return 1 end\n    if cache[n] then return cache[n] end\n    local result = n * f(n - 1)\n    cache[n] = result\n    return result\n  end\n  return f\nend\nlocal fact = factorialMemo()\nprint(fact(5))"}
{"input":"A function returning four values, though only the first three are assigned. Prints 'a b c' as the rest are discarded.","output":"local function multipleReturns()\n  return \"a\",\"b\",\"c\",\"d\"\nend\nlocal x, y, z = multipleReturns()\nprint(x, y, z)"}
{"input":"Sets a metamethod '__index' on 't' so that missing fields return 'defaultVal,' showing how to supply a fall-back value.","output":"function defaultTableIndex(t, defaultVal)\n  setmetatable(t, {\n    __index = function()\n      return defaultVal\n    end\n  })\nend\nlocal scores = {}\ndefaultTableIndex(scores, 0)\nprint(scores.something)"}
{"input":"Generates a random floating-point number in [0,1). Seeds with the current time to change results each execution.","output":"function randomFloat()\n  math.randomseed(os.time())\n  return math.random()\nend\nlocal f = randomFloat()\nprint(f)"}
{"input":"Builds a table with 'times' copies of 'val.' If 'val' is a table, references are repeated rather than distinct copies.","output":"function replicateTbl(val, times)\n  local r = {}\n  for i=1,times do\n    r[i] = val\n  end\n  return r\nend\nlocal repeated = replicateTbl(\"hello\", 3)\nfor _,v in ipairs(repeated) do\n  print(v)\nend"}
{"input":"Wraps a function to log messages before and after calling it. Perfect for debugging function calls.","output":"local function logWrapper(fn)\n  return function(...)\n    print(\"Calling...\")\n    local res = fn(...)\n    print(\"Called.\")\n    return res\n  end\nend\nlocal function sum(a,b) return a+b end\nlocal loggedSum = logWrapper(sum)\nprint(loggedSum(2,5))"}
{"input":"Counts the number of divisors for 'n' by checking every integer 1..n. For 12, prints 6 (1,2,3,4,6,12).","output":"function factorCount(n)\n  local count = 0\n  for i=1,n do\n    if n % i == 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\nprint(factorCount(12))"}
{"input":"Displays how multiple assignment can handle different data types. 'a' is integer, 'b' is string, 'c' is table.","output":"local function multiAssign()\n  local a, b, c = 1, \"two\", {x=3}\n  return a, b, c\nend\nlocal x, y, z = multiAssign()\nprint(x, y, z.x)"}
{"input":"Checks if a table is symmetric by comparing pairs of elements from the start and end. Returns true if it's palindromic.","output":"function palindromeTable(tbl)\n  local n = #tbl\n  for i=1,math.floor(n/2) do\n    if tbl[i] ~= tbl[n-i+1] then\n      return false\n    end\n  end\n  return true\nend\nprint(palindromeTable({1,2,3,2,1}))"}
{"input":"Searches for the first element in 'tbl' matching 'predicate.' Returns its index or nil if none match.","output":"local function findIndex(tbl, predicate)\n  for i,v in ipairs(tbl) do\n    if predicate(v) then\n      return i\n    end\n  end\n  return nil\nend\nlocal idx = findIndex({10,15,20}, function(x) return x>10 end)\nprint(idx)"}
{"input":"Another demonstration of currying a two-argument function. Allows partial application of 'a' and final application of 'b.'","output":"function curry2(fn)\n  return function(a)\n    return function(b)\n      return fn(a, b)\n    end\n  end\nend\nlocal function subtract(a,b) return a-b end\nlocal csub = curry2(subtract)\nprint(csub(10)(2))"}
